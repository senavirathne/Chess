@page "/profile"

@using Chess.Client.ViewModels

@using System.Security.Claims
@using Microsoft.JSInterop.Implementation
@using System.Net
@inject IProfileVIewModel _profileVIewModel
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@inject HttpClient _httpClient

<div class="col-12">
    <div class="row col-4" multiple>
        <img src="@_profileVIewModel.ProfilePictureUrl" style="width: 250px;height: 250px;"> <br/><br/>
        <InputFile OnChange="@OnInputFileChanged"></InputFile>
    </div>
    <input type="text" @bind-value="_profileVIewModel.FirstName" class="form-control" placeholder="first name">
    <br/>
    <input type="text" @bind-value="_profileVIewModel.LastName" class="form-control" placeholder="last name">
    <br/>
    <input type="text" @bind-value="_profileVIewModel.EmailAddress" class="form-control" placeholder="email address">
    <br/>
    @* <p style="width: 800px; overflow-wrap: break-word;">@ProfilePicDataUrl</p> *@


    <button class="btn btn-primary" @onclick="() => _profileVIewModel.UpdateProfile()">Update Profile</button>
    <button class="btn btn-primary" @onclick="() => DownloadProPicture()">Download Profile Picture</button>
    @* <button class="btn btn-primary" @onclick="() => _profileVIewModel.GetProfile()">Get Profile</button> *@
    <span>&nbsp;&nbsp; </span>@_profileVIewModel.Signal
</div>

@code
{
    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationState;
        var user = authState.User;
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var claim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier);
            _profileVIewModel.UserId = Convert.ToInt64(claim?.Value);
            try
            {
                await _profileVIewModel.GetProfile();
            }
            catch (HttpRequestException e)
            {
                if (e.StatusCode == HttpStatusCode.Unauthorized)
                {
                    await _httpClient.GetAsync("user/logoutuser");
                    _navigationManager.NavigateTo("/", true);
                }
                throw;
            }
            
        }
        else
        {
            _navigationManager.NavigateTo("/");
        }
    }

    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFile)
    {
        var file = inputFile.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);

        _profileVIewModel.ProfilePictureUrl = $"data:image/png;base64,{Convert.ToBase64String(buffer)}";
    }


    private async Task DownloadProPicture()
    {
        var base64String = _profileVIewModel.ProfilePictureUrl.Split(',');
        var module = await _jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/site.js");

        await module.InvokeVoidAsync("downloadFile", "image/png", base64String[1], "profile.png");
    }
}       